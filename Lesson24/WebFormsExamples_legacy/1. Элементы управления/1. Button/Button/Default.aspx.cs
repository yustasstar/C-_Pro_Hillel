using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;

namespace Button
{
    /*
          ASP.NET использует наследование в модели веб-страниц. Существуют 
    следующие уровни. 
    1. Класс Page, входящий в состав библиотеки классов .NET, определяет базовый  
    набор функциональных возможностей, которые позволяют веб-странице обслуживать 
    другие элементы управления, визуализировать HTML-код и предоставлять доступ к 
    традиционным объектам в стиле ASP вроде Request, Response и Session. 
    2. Класс фонового кода, например, _Default, наследуется от класса Page, чтобы 
    получить этот базовый набор функциональных возможностей веб-страницы ASP.NET. 
    3. При компиляции этого класса, ASP.NET добавляет в него кое-какой дополнительный код. 
    В этом генерируемом автоматически коде все имеющиеся на странице элементы  
    управления определяются как защищенные переменные, чтобы можно было получать 
    к ним доступ в коде. Использование защищенных переменных в классе отделенного 
    кода гарантирует их доступность и в  производном классе страницы, что позволяет 
    ASP.NET во время выполнения сопоставлять переменные элементов управления с 
    соответствующими дескрипторами и присоединять необходимые обработчики событий. 
    4. Компилятор ASP.NET создает еще один класс для представления самой  
    страницы .aspx. Этот класс наследуется от класса фонового кода (вместе с добавленным 
    в него дополнительным кодом). Имя для этого класса ASP.NET создает просто путем добавления 
    к имени класса отделенного кода суффикса aspx (например, _Default.aspx). В этом классе содержится 
    код, необходимый для инициализации страницы и всех ее элементов управления, 
    а также окончательная версия визуализируемой HTML-разметки. Вдобавок  
    экземпляр именно этого класса ASP.NET и будет создаваться при получении запросов 
    на страницу. 
    */

    public partial class _Default : System.Web.UI.Page
    {
        /*
        protected _Default()
        {
            this.PreLoad += Page_Load;
        }
        */
        private void Page_Load(object sender, EventArgs e)
        {
            Message.Text += "Page_Load<br />";
        }

        // protected!!!
        protected void SubmitBtn_Click(object sender, EventArgs e)
        {
            Message.Text += this.Text1.Value + "<br />";
        }



        /*
               При первом запуске страницы ASP.NET создает объекты этой страницы и ее  
        элементов управления. Далее выполняется код инициализации, после чего страница 
        преобразуется в HTML и возвращается клиенту, а созданные объекты удаляются 
        из памяти сервера. 
        2. На каком-то этапе пользователь выполняет действие, инициирующее обратную 
        отправку данных, например, щелкает на кнопке. Тогда страница отправляется 
        серверу вместе со всеми данными формы. 
        3. ASP.NET перехватывает эту возвращаемую страницу и снова воссоздает ее  
        объекты, возвращая их в то состояние, в котором они находились тогда, когда эта 
        страница в последний раз отправлялась клиенту. 
        4. Далее ASP.NET проверяет, какая именно операция привела к обратной отправке 
        данных, и генерирует соответствующие события (например, Button.Click), на 
        которые разработчик может предусмотреть в своем коде определенную реакцию. 
        Как правило, разработчики предпочитают выполнять на этом этапе какую-то  
        серверную операцию (вроде обновления базы данных или чтения данных из файла), 
        а затем изменять объекты элементов управления так, чтобы они отображали уже 
        новую информацию. 
        5. Измененная страница преобразуется в HTML и возвращается клиенту. Объекты 
        страницы удаляются из памяти. В случае если происходит еще одна обратная  
        отправка данных, ASP.NET повторяет действия, перечисленные в пунктах 2-4. 
        */
    }
}
