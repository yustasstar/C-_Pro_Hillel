//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseEntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VUZEntities : DbContext
    {
        public VUZEntities()
            : base("name=VUZEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DEPARTMENT> DEPARTMENT { get; set; }
        public virtual DbSet<FACULTY> FACULTY { get; set; }
        public virtual DbSet<LECTURE> LECTURE { get; set; }
        public virtual DbSet<LECTURE_TYPE> LECTURE_TYPE { get; set; }
        public virtual DbSet<POST> POST { get; set; }
        public virtual DbSet<ROOM> ROOM { get; set; }
        public virtual DbSet<SGROUP> SGROUP { get; set; }
        public virtual DbSet<SUBJECT> SUBJECT { get; set; }
        public virtual DbSet<TEACHER> TEACHER { get; set; }
        public virtual DbSet<show_post> show_post { get; set; }
        public virtual DbSet<show_T> show_T { get; set; }
    
        public virtual int AddDepartment(Nullable<int> id, string faculty, string name, string head, Nullable<int> building, Nullable<decimal> fund)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var facultyParameter = faculty != null ?
                new ObjectParameter("Faculty", faculty) :
                new ObjectParameter("Faculty", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var headParameter = head != null ?
                new ObjectParameter("Head", head) :
                new ObjectParameter("Head", typeof(string));
    
            var buildingParameter = building.HasValue ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(int));
    
            var fundParameter = fund.HasValue ?
                new ObjectParameter("Fund", fund) :
                new ObjectParameter("Fund", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDepartment", idParameter, facultyParameter, nameParameter, headParameter, buildingParameter, fundParameter);
        }
    
        public virtual int how_many_teacher(ObjectParameter s)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("how_many_teacher", s);
        }
    }
}
