													Event Bus

Event Bus — это шаблон проектирования, который позволяет осуществлять взаимодействие 
между различными компонентами приложения через сообщения (события). 
Он используется для реализации архитектур, таких как Event-Driven Architecture (EDA), 
и позволяет достигать слабой связанности компонентов.

-> Основные элементы Event Bus:
	- Publisher (издатель) — создает и публикует события.
	- Subscriber (подписчик) — подписывается на события и реагирует на них.
	- Event — объект, содержащий данные события.
	- Event Bus — шина, которая связывает издателей и подписчиков.
-> Преимущества:
	- Слабая связанность между компонентами.
	- Удобство масштабирования и добавления новых подписчиков.
	- Подходит для обработки асинхронных операций.

Использование Event Bus в .NET Web API позволяет разделить логику приложения на независимые модули, 
которые взаимодействуют через события. Это особенно полезно в микросервисной архитектуре или при асинхронной обработке данных.

В .NET существует несколько популярных библиотек и инструментов для реализации шаблона Event Bus. Вот основные из них:

1. MassTransit
	-> Описание: Одна из самых популярных библиотек для работы с Event Bus в .NET.
	-> Поддерживаемые брокеры сообщений: RabbitMQ, Kafka, Azure Service Bus, Amazon SQS, ActiveMQ.
	-> Плюсы:
		- Простая интеграция с .NET и ASP.NET Core.
		- Богатый набор возможностей (поддержка Saga, Dead Letter Queue и т.д.).
		- Расширяемость.
	-> Минусы:
		- Может быть избыточным для простых проектов.
	-> Ссылка на документацию: https://masstransit.io/

2. MediatR
	-> Описание: Легковесная библиотека для реализации паттерна Mediator. 
				 Подходит для синхронной передачи команд и событий в пределах одного приложения.
	-> Поддерживаемые брокеры: Не поддерживает внешние брокеры, только локальное взаимодействие.
	-> Плюсы:
		- Очень легковесная и простая.
		- Отлично подходит для реализации CQRS.
	-> Минусы:
		- Не поддерживает внешние брокеры сообщений.
	-> Ссылка на документацию: https://github.com/jbogard/MediatR

3. CAP (DotNetCore.CAP)
	-> Описание: Легковесная альтернатива MassTransit, ориентированная на интеграцию с базами данных.
	-> Поддерживаемые брокеры сообщений: RabbitMQ, Kafka, Redis, Pulsar.
	-> Плюсы:
		- Простая интеграция.
		- Поддержка транзакций с базами данных (доставка событий гарантируется).
	-> Минусы:
		- Ограниченные возможности по сравнению с MassTransit.
	-> Ссылка на документацию: https://cap.dotnetcore.xyz/

4. Rebus
	-> Описание: Простая и гибкая библиотека для работы с сообщениями.
	-> Поддерживаемые брокеры сообщений: RabbitMQ, Azure Service Bus, Amazon SQS, Kafka.
	-> Плюсы:
		- Простота использования.
		- Расширяемость.
	-> Минусы:
		- Меньше возможностей по сравнению с MassTransit.
	Ссылка на документацию: https://github.com/rebus-org/Rebus

5. NServiceBus
	-> Описание: Коммерческое решение для работы с Event Bus.
	-> Поддерживаемые брокеры сообщений: RabbitMQ, Azure Service Bus, Amazon SQS.
	-> Плюсы:
		- Богатый функционал.
		- Подходит для крупных корпоративных приложений.
	-> Минусы:
		- Платная (с бесплатной версией для небольших проектов).
	-> Ссылка на документацию: https://particular.net/nservicebus

6. Azure Service Bus SDK
	-> Описание: Официальный SDK от Microsoft для работы с Azure Service Bus.
	-> Поддерживаемые брокеры: Только Azure Service Bus.
	-> Плюсы:
		- Глубокая интеграция с Azure.
	-> Минусы:
		- Ограничен платформой Azure.
	-> Ссылка на документацию: https://learn.microsoft.com/en-us/azure/service-bus-messaging/



										Виды реализации архитектуры Event Bus:

Архитектура Event Bus может быть реализована различными способами в зависимости от требований системы.

1. Локальная (In-Memory) реализация
-> Описание: Все события передаются внутри одного процесса.
-> Используется с библиотеками: MediatR, Custom In-Memory Bus.
-> Плюсы:
	- Быстрая и простая реализация.
	- Не требует внешнего брокера сообщений.
-> Минусы:
	- Не масштабируется на несколько экземпляров приложения.

2. С использованием брокера сообщений
-> Описание: События передаются через брокер сообщений (RabbitMQ, Kafka, Azure Service Bus).
-> Используется с библиотеками: MassTransit, CAP, Rebus.
-> Плюсы:
	- Масштабируемость.
	- Возможность работы в распределенной системе.
-> Минусы:
	- Усложнение инфраструктуры.

3. Event Sourcing
-> Описание: Каждое событие сохраняется в виде записи, и текущее состояние системы вычисляется на основе последовательности событий.
-> Используется с библиотеками: Event Store, Kafka.
-> Плюсы:
	- Полная история событий.
	- Простота восстановления состояния.
-> Минусы:
	- Усложнение разработки.

4. Pub/Sub (Publish-Subscribe) модель
-> Описание: События публикуются издателем, и несколько подписчиков могут их получать.
-> Используется с брокерами: RabbitMQ, Kafka, Redis.
-> Плюсы:
	- Простота распределения сообщений.
-> Минусы:
	- Требует надежной доставки.

5. Saga
-> Описание: Управляет долгоживущими процессами, состоящими из нескольких шагов, с использованием событий.
-> Используется с библиотеками: MassTransit, NServiceBus.
-> Плюсы:
	- Управление сложными бизнес-процессами.
-> Минусы:
	- Сложность реализации.


Выбор библиотеки и подхода зависит от ваших требований:
- Маленький проект с ограниченными требованиями: MediatR.
- Масштабируемое распределенное приложение: MassTransit или CAP.
- Требуется Event Sourcing: Kafka или Event Store.

---------------------
Базовый пример по RabbitMQ в папке "Конспект" или "ДополнительныеМатериалы", файле RabbitMqDemo.zip