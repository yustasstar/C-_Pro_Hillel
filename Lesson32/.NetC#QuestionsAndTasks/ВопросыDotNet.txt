1. Что такое управляемый (managed) код?
2. Что такое неуправляемый (unmanaged) код?
3. Какая разница между управляемым (managed) и неуправляемым (unmanaged) кодом?
4. Какая разница между .NET Framework, .NET Core, .NET Standard?
5. Что такое CLR?
6. Что такое Common Type System (CTS)?
7. Что такое Common Language Specification (CLS)?
8. C# – это компилируемый или интерпретируемый язык?
9. Что такое Microsoft Intermediate Language (MSIL)?
10. Что такое рефлектор?
11. Что такое обфускатор / дотфускатор?
12. Что такое типы значения (value types)?
13. Что такое ссылочные типы (reference types)?
14. Какая разница между value types и reference types?
15. Что такое упаковка (boxing) и распаковка (unboxing)?
16. Что такое сборка мусора?
17. Объясните базовые принципы работы сборщика мусора (garbage collector).
18. Какая разница между классами String и StringBuilder?
19. String – это value type или reference type?
20. Массив – это value type или reference type?
21. Что такое Nullable типы?
22. Что такое Top Level Statements?
23. Что такое инкапсуляция? Приведите пример инкапсуляции из обычной жизни,
без использования каких-либо понятий в области программирования.
24. Что такое полиморфизм? Приведите пример полиморфизма из обычной жизни,
без использования каких-либо понятий в области программирования.
25. Что такое наследование? Приведите пример наследования из обычной жизни,
без использования каких-либо понятий в области программирования.
26. Что такое класс? Что такое объект? Какая разница между классом и объектом?
27. Какие спецификаторы доступа есть в C#? Какая между ними разница?
28. Что такое конструктор? Какие цели и задачи у конструктора класса?
29. Что такое перегруженный конструктор класса? Как создать перегруженный конструктор класса?
30. Что такое метод класса?
31. Что такое поле класса?
32. Что такое перегруженный метод класса?
33. Можно ли перегрузить метод класса на основании возвращаемого значения?
34. Что такое статический конструктор класса?
35. Что такое ключевое слово this? Для каких целей оно используется?
36. Когда нужно использовать ref параметры методов?
37. Когда нужно использовать out параметры методов?
38. В чем разница между ref и out параметрами методов?
39. Что такое рекурсия? Когда ее необходимо использовать? В чем ее потенциальная опасность?
40. Как создать метод с переменным количеством параметров?
41. Приведите пример, когда необходимо создать метод с переменным количеством параметров.
42. Что такое статическое поле класса?
43. Что такое статический метод класса?
44. В чем разница между статическим методом класса и обычным методом класса?
45. Что такое деконструктор?
46. Что такое исключение?
47. Для каких целей используется ключевое слово try?
48. Для каких целей используется ключевое слово catch?
49. Для каких целей используется ключевое слово finally?
50. Для каких целей используется ключевое слово throw?
51. Объясните, как работает механизм вложенных друг в друга блоков try.
52. Что такое повторное генерирование исключения?
53. Что делает конструкция throw;?
54. Для чего используется ключевое слово checked?
55. Для чего используется ключевое слово unchecked?
56. Для чего используются фильтры исключений?
57. Что такое пространство имен?
58. Для каких целей используются пространства имен?
59. Когда может понадобиться создать вложенное пространство имен?
60. Зачем разбивать пространство имен на части?
61. Что такое перегрузка операторов?
62. Для каких целей нужно использовать перегрузку операторов?
63. Приведите пример удачной и неудачной перегрузки операторов.
64. Чем отличаются друг от друга перегрузка унарных и бинарных операторов?
65. Зачем нужно перегружать операторы преобразования?
66. Для каких целей создают пользовательские индексаторы?
67. Что такое свойство?
68. Для каких целей используются ключевые слова get, set, init в свойствах?
69. В чем отличие обычных свойств и автоматических?
70. Что такое наследование?
71. Какой порядок запуска конструкторов при наследовании?
72. Почему в C# отсутствует множественное наследование от классов?
73. Какие задачи решает ключевое слово sealed?
74. Какие задачи решает ключевое слово base?
75. Как работает сокрытие имен при наследовании.
76. Что такое виртуальный метод?
77. Для чего используются виртуальные методы?
78. В чем отличие виртуального и обычного метода?
79. Что такое абстрактный класс?
80. В чем отличие абстрактного и обычного класса?
81. Зачем нужно использовать абстрактные классы?
82. Что такое упаковка?
83. Что такое распаковка?
84. Когда необходимо использовать упаковку и распаковку?
85. Какие минусы и плюсы использования упаковки и распаковки?
86. Что такое интерфейс? Цели и задачи интерфейсов?
87. В чем отличие интерфейсов и абстрактных классов?
88. Почему в C# нет множественного наследования от классов?
89. В чем отличие классов и структур?
90. Приведите примеры обоснованного использования структур.
91. Для каких целей используются Nullable типы?
92. Что такое делегат? Цели и задачи делегатов.
93. Что такое событие? Цели и задачи событий.
94. В чем отличие событий и делегатов?
95. Что такое анонимный метод?
96. Что такое лямбда выражение?
97. Для каких целей используются extension методы?
98. Когда необходимо использовать записи (records)?
99. Когда необходимо использовать generics?
100. В каком случае нужно использовать тот или иной класс коллекции.
101. Объясните принцип работы сборщика мусора.
102. Как используется понятие поколения при сборке мусора?
103. Что такое метод Finalize?
104. Для каких целей нужно имплементировать интерфейс IDisposable?
105. Что такое LINQ? Какие цели и задачи у LINQ?
106. Когда нужно использовать группировку и сортировку в LINQ?
107. В каком случае нужно использовать StreamRider?
108. В каком случае нужно использовать BinaryRider?
109. Для чего нужно использовать сериализацию?
110. В чем отличие двоичного и SOAP форматирования?