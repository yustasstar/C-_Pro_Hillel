Еще одна классическая задача на синхронизацию процессов – это так называемая «задача о спящем парикмахере» [2]. 
Рассмотрим парикмахерскую, в которой работает один парикмахер, имеется одно кресло для стрижки 
и несколько кресел в приемной для посетителей, ожидающих своей очереди. Если в парикмахерской нет посетителей, 
парикмахер засыпает прямо на своем рабочем месте. Появившийся посетитель должен его разбудить, 
в результате чего парикмахер приступает к работе. Если в процессе стрижки появляются новые посетители, 
они должны либо подождать своей очереди, либо покинуть парикмахерскую, если в приемной нет свободного кресла для ожидания. 
Задача состоит в том, чтобы корректно запрограммировать поведение парикмахера и посетителей.

Одно из возможных решений этой задачи представлено ниже. 
Процедура barber() описывает поведение парикмахера (она включает в себя бесконечный цикл – ожидание клиентов и стрижку). 
Процедура customer() описывает поведение посетителя. 
Несмотря на кажущуюся простоту задачи, понадобится целых 3 семафора: 
customers – подсчитывает количество посетителей, ожидающих в очереди, barbers – 
обозначает количество свободных парикмахеров (в случае одного парикмахера его значения либо 0, либо 1) и 
mutex – используется для синхронизации доступа к разделяемой переменной waiting. Переменная waiting,
как и семафор customers, содержит количество посетителей, ожидающих в очереди, она используется в 
программе для того, чтобы иметь возможность проверить, имеется ли свободное кресло для ожидания, 
и при этом не заблокировать процесс, если кресла не окажется. Заметим, что как и в предыдущем примере, 
эта переменная является разделяемым ресурсом, и доступ к ней охраняется семафором mutex. 
Это необходимо, так как для обычной переменной, в отличие от семафора, 
чтение и последующее изменение не являются неделимой операцией.

