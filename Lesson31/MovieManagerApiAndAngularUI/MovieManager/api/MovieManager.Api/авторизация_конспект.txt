Важливе місце у додатку займає автентифікація та авторизація. Аутентифікація представляє процес визначення користувача. 
Авторизація представляє процес визначення, чи має користувач право доступу до деякого ресурсу. 
Тобто, якщо автентифікація відповідає на запитання "Ким є користувач?", 
то авторизація відповідає на питання "Які права має користувач у системі?" ASP.NET Core 
має вбудовану підтримку автентифікації та авторизації.

Що таке веб-токен JSON?
Веб-маркер JSON (або JWT) — це просто корисне навантаження JSON, що містить певне твердження. 
Ключовою властивістю JWT є те, що для підтвердження їх дійсності нам потрібно лише поглянути на сам маркер.
JWT складається з 3 частин: заголовка, корисного навантаження та підпису.

https://jwt.io/

Дві найбільш поширені схеми аутентифікації:

"Cookies" : автентифікація на основі cookie. Зберігається у константіCookieAuthenticationDefaults.AuthenticationScheme
"Bearer" : аутентифікація на основі jwt-токенів. Зберігається у константіJwtBearerDefaults.AuthenticationScheme


Крім застосування схеми аутентифікації, необхідно підключити аутентифікацію певного типу. Для цього можна використовувати такі методи:

AddCookie() : підключає та конфігурує аутентифікацію за допомогою куки.

AddJwtBearer() : підключає та конфігурує аутентифікацію за допомогою jwt-токенів 
(для цього методу необхідний Nuget-пакет Microsoft.AspNetCore.Authentication.JwtBearer )



Одним з підходів до авторизації та аутентифікації в ASP.NET Core є механізм аутентифікації та авторизації за допомогою JWT-токенів. 
Що таке JWT-токен? JWT (або JSON Web Token) є веб-стандартом, 
який визначає спосіб передачі даних про користувача у форматі JSON у зашифрованому вигляді.

JWT-токен складається з трьох частин:

Header - об'єкт JSON, який містить інформацію про тип токена та алгоритм його шифрування

Payload - об'єкт JSON, який містить дані, потрібні для авторизації користувача

Signature - рядок, який створюється за допомогою секретного коду, Headera та Payload. Цей рядок служить для верифікації токена


За допомогою методу AddJwtBearer() додаток додається конфігурація токена. 
Для конфігурації токена використовується об'єкт JwtBearerOptions , 
який дозволяє за допомогою властивостей налаштувати роботу з токеном. Цей об'єкт має безліч властивостей. 
Тут же використано лише властивість TokenValidationParameters , яке задає параметри валідації токена.



Об'єкт TokenValidationParameters має безліч властивостей, які дозволяють налаштувати різні аспекти валідації токена. 

ValidateIssuer : вказує, чи валідуватиметься видавець при валідації токена

ValidIssuer : рядок, який представляє видавця токена

ValidateAudience : вказує, чи валідуватиметься споживач токена

ValidAudience : рядок, який представляє споживача токена

ValidateLifetime : вказує, чи валідуватиметься час існування

IssuerSigningKey : представляє ключ безпеки - об'єкт SecurityKey, який застосовуватиметься при генерації токена

ValidateIssuerSigningKey : вказує, чи валідуватиметься ключ безпеки
